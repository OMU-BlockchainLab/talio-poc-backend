- name: Prepare task definition
  local_action: template src=templates/task_definition.json.j2 dest=./task_definition.json

- name: Register task definition
  shell:  aws ecs register-task-definition --cli-input-json file://task_definition.json
  register: task_definition

- name: Prepare migration task
  local_action: template src=templates/run_command.json.j2 dest=./run_command.json
  vars:
    task_definition_arn: "{{ (task_definition.stdout | from_json).taskDefinition.taskDefinitionArn }}"
    command: "[\"yarn\", \"db:migrate\"]"

- name: Run migrations
  shell:  aws ecs run-task --cli-input-json file://run_command.json
  register: run_task_result

- set_fact:
    migration_task_arn: "{{ (run_task_result.stdout | from_json).tasks[0].taskArn }}"

- name: Wait migrations
  shell: aws ecs describe-tasks --tasks {{ migration_task_arn }} --cluster {{ cluster }}
  register: task_description
  until: (task_description.stdout | from_json).tasks[0].lastStatus == 'STOPPED'
  retries: 50

- set_fact:
    exit_codes: "{{ (task_description.stdout | from_json).tasks[0].containers | map(attribute=\"exitCode\") | select(\"defined\") | select(\"equalto\", 1) | list }}"

- fail:
    msg: "Migrations failed"
  when: exit_codes != []

- name: Prepare service
  local_action: template src=templates/update_service.json.j2 dest=./update_service.json
  vars:
    task_definition_arn: "{{ (task_definition.stdout | from_json).taskDefinition.taskDefinitionArn }}"

- name: Update service
  shell:  aws ecs update-service --cli-input-json file://update_service.json
